[["data.html", "Chapter 3 Data 3.1 Sources 3.2 Cleaning / transformation 3.3 Missing value analysis", " Chapter 3 Data 3.1 Sources The NYC Department of Education was responsible for collecting and publishing this data. The school-level test scores were collected after they were administered and graded, and then this data was used to calculate the district-level test scores. The demographic information was collected using both the student’s information once they entered the NYC public school system, and census data. We chose to use standardized testing data from grades 3-8 over Regent’s scores (the high school equivalent of these elementary and middle school tests) because there are more middle and elementary schools in the city, and thus, more data to work with. The data was pulled from six different spreadsheets, with categorical and numerical data, with a range of 16 to 44 variables. The two largest spreadsheets had 37,000+ observations, while the smallest had only 175. The datasets did not have many issues, as there were only two missing observations in total; both were test scores for a specific school in a specific year (one Math and one ELA). However, there was a great deal of data transformation, merging, and cleaning that needed to be done in order to investigate some of the questions brought forth earlier. 3.2 Cleaning / transformation Here are the various steps of the data cleaning and transformation processes, broken down into smaller tasks. Reading in the Data demographic_notes &lt;- read_excel(&quot;../demographic_snapshot.xlsx&quot;, sheet = &quot;NOTES&quot;, na = &quot;MISSING&quot;) demographics_school &lt;- read_excel(&quot;../demographic_snapshot.xlsx&quot;, sheet = &quot;School&quot;, na = &quot;MISSING&quot;) demographics_district &lt;- read_excel(&quot;../demographic_snapshot.xlsx&quot;, sheet = &quot;District&quot;, na = &quot;MISSING&quot;) math_school &lt;- read_excel(&quot;../school-math-results-2013-2022-(public).xlsx&quot;, sheet = 2, na = &quot;MISSING&quot;) math_district &lt;- read_excel(&quot;../district-math-results-2013-2022-(public).xlsx&quot;, sheet = 2, na = &quot;MISSING&quot;) ela_school &lt;- read_excel(&quot;../school-ela-results-2013-2022-(public).xlsx&quot;, sheet = 2, na = &quot;MISSING&quot;) ela_district &lt;- read_excel(&quot;../district-ela-results-2013-2022-(public).xlsx&quot;, sheet = 2, na = &quot;MISSING&quot;) Data Transformation Prepping the individual datasets to be joined, starting with getting rid of unnecessary years demographics_district_filtered &lt;- filter(demographics_district, Year == &#39;2017-18&#39; | Year == &#39;2018-19&#39; | Year == &#39;2021-22&#39;) demographics_school_filtered &lt;- filter(demographics_school, Year == &#39;2017-18&#39; | Year == &#39;2018-19&#39; | Year == &#39;2021-22&#39;) math_school_filtered &lt;- filter(math_school, Year == &#39;2018&#39; | Year == &#39;2019&#39; | Year == &#39;2022&#39;) math_district_filtered &lt;- filter(math_district, Year == &#39;2018&#39; | Year == &#39;2019&#39; | Year == &#39;2022&#39;) ela_school_filtered &lt;- filter(ela_school, Year == &#39;2018&#39; | Year == &#39;2019&#39; | Year == &#39;2022&#39;) ela_district_filtered &lt;- filter(ela_district, Year == &#39;2018&#39; | Year == &#39;2019&#39; | Year == &#39;2022&#39;) Converting years of demographics spreadsheets to single year format instead of school year demographics_district_filtered[demographics_district_filtered == &#39;2017-18&#39;] &lt;- &#39;2018&#39; demographics_district_filtered[demographics_district_filtered == &#39;2018-19&#39;] &lt;- &#39;2019&#39; demographics_district_filtered[demographics_district_filtered == &#39;2021-22&#39;] &lt;- &#39;2022&#39; demographics_school_filtered[demographics_school_filtered == &#39;2017-18&#39;] &lt;- &#39;2018&#39; demographics_school_filtered[demographics_school_filtered == &#39;2018-19&#39;] &lt;- &#39;2019&#39; demographics_school_filtered[demographics_school_filtered == &#39;2021-22&#39;] &lt;- &#39;2022&#39; Renaming the “District” column in the demographics dataset so it matches with the ELA/Math ones by district demographics_district_filtered &lt;- rename(demographics_district_filtered, &quot;District&quot; = &quot;Administrative District&quot;) Converting “Year” columns of both demographics datasets &amp; “District” column of the demographic district dataset to numeric so they match the Math/ELA datasets demographics_school_filtered$Year &lt;- as.numeric(demographics_school_filtered$Year) demographics_district_filtered$District &lt;- as.numeric(demographics_district_filtered$District) demographics_district_filtered$Year &lt;- as.numeric(demographics_district_filtered$Year) Selecting the rows where data for “All Grades” is used in the Math/ELA spreadsheets math_district_filtered &lt;- filter(math_district_filtered, Grade == &quot;All Grades&quot;) ela_district_filtered &lt;- filter(ela_district_filtered, Grade == &quot;All Grades&quot;) math_school_filtered &lt;- filter(math_school_filtered, Grade == &quot;All Grades&quot;) ela_school_filtered &lt;- filter(ela_school_filtered, Grade == &quot;All Grades&quot;) Renaming all of the columns in the Math/ELA spreadsheets so we know which scores correspond to which test after everything is joined. The “_m” suffix corresponds to a Math score, and the “_e” suffix corresponds to an ELA score for (i in 7:ncol(math_school_filtered)) { oldname &lt;- colnames(math_school_filtered[i]) newname &lt;- paste(oldname, &quot;m&quot;, sep = &quot;_&quot;) colnames(math_school_filtered)[i] &lt;- newname } for (i in 7:ncol(ela_school_filtered)) { oldname &lt;- colnames(ela_school_filtered[i]) newname &lt;- paste(oldname, &quot;e&quot;, sep = &quot;_&quot;) colnames(ela_school_filtered)[i] &lt;- newname } for (i in 5:ncol(math_district_filtered)) { oldname &lt;- colnames(math_district_filtered[i]) newname &lt;- paste(oldname, &quot;m&quot;, sep = &quot;_&quot;) colnames(math_district_filtered)[i] &lt;- newname } for (i in 5:ncol(ela_district_filtered)) { oldname &lt;- colnames(ela_district_filtered[i]) newname &lt;- paste(oldname, &quot;e&quot;, sep = &quot;_&quot;) colnames(ela_district_filtered)[i] &lt;- newname } Joining datasets (one for school, one for district) df_district &lt;- ela_district_filtered%&gt;%inner_join(math_district_filtered, by = c(&#39;District&#39;, &#39;Year&#39;))%&gt;%inner_join(demographics_district_filtered, by = c(&quot;District&quot;, &quot;Year&quot;)) df_school &lt;- ela_school_filtered%&gt;%inner_join(math_school_filtered, by = c(&#39;DBN&#39;, &#39;Year&#39;))%&gt;%inner_join(demographics_school_filtered, by = c(&quot;DBN&quot;, &quot;Year&quot;)) Adding a new column in each dataframe that shows the percentage of students in a given district/school who sat for testing in a given year df_school$`% tested_e` &lt;- df_school$`Number Tested_e`/df_school$`Total Enrollment` df_school$`% tested_m` &lt;- df_school$`Number Tested_m`/df_school$`Total Enrollment` df_district$`% tested_e` &lt;- df_district$`Number Tested_e`/df_district$`Total Enrollment` df_district$`% tested_m` &lt;- df_district$`Number Tested_m`/df_district$`Total Enrollment` Getting rid of unnecessary columns in each of the combined dataframes df_school &lt;- df_school %&gt;% select(-&quot;% Female&quot;, -&quot;% Male&quot;, -contains(&quot;Number&quot;),-&quot;# Missing Race/Ethnicity Data&quot;,-&quot;# Multi-Racial&quot;,-&quot;# Black&quot;, -&quot;# Asian&quot;, -&quot;# Female&quot;, -&quot;# Male&quot;, -&quot;# White&quot;,-&quot;# Hispanic&quot;,-&quot;# Native American&quot;, -&quot;# English Language Learners&quot;,-contains(&quot;Level&quot;),-contains(&quot;...&quot;), -contains(&quot;Category&quot;), -contains(&quot;School Name&quot;),-&quot;# Poverty&quot;,-contains(&quot;Grade&quot;), -&quot;# Students with Disabilities&quot;) df_district &lt;- df_district %&gt;% select(-&quot;% Female&quot;, -&quot;% Male&quot;, -contains(&quot;Number&quot;),-&quot;# Missing Race/Ethnicity Data&quot;,-&quot;# Multi-Racial&quot;,-&quot;# Black&quot;, -&quot;# Asian&quot;, -&quot;# Female&quot;, -&quot;# Male&quot;, -&quot;# White&quot;,-&quot;# Hispanic&quot;,-&quot;# Native American&quot;, -&quot;# English Language Learners&quot;, -contains(&quot;Level&quot;), -contains(&quot;Grade&quot;), -contains(&quot;Category&quot;), -&quot;# Poverty&quot;, -&quot;# Students with Disabilities&quot;) Getting rid of the “Above 95%” entries in each dataframe- replacing it with 0.95 for the sake of analysis. Then converting numeric columns to numeric again df_school[df_school == &quot;Above 95%&quot;] &lt;- &quot;0.95&quot; df_district[df_district == &quot;Above 95%&quot;] &lt;- &quot;0.95&quot; df_school[,2:ncol(df_school)] &lt;- df_school[,2:ncol(df_school)]%&gt;%lapply(as.numeric) df_district[,2:ncol(df_district)] &lt;- df_district[,2:ncol(df_district)]%&gt;%lapply(as.numeric) Imputing all missing values with the mean of the column; too many rows/columns to create a heatmap and only 2 missing values (one in the Math scores and one in the ELA scores) so we will just impute them with the mean value for each category and analyze the other missing values later df_school$`Mean Scale Score_e`[is.na(df_school$`Mean Scale Score_e`)] &lt;- mean(df_school$`Mean Scale Score_e`,na.rm = TRUE) df_school$`Mean Scale Score_m`[is.na(df_school$`Mean Scale Score_m`)] &lt;- mean(df_school$`Mean Scale Score_m`,na.rm = TRUE) Creating a % POC column (that sums all of the other races) for racial analysis of data df_school$`% POC` &lt;- (1-df_school$`% White`) df_district$`% POC` &lt;- (1-df_district$`% White`) Renaming specific columns for visibility in plots df_school &lt;- rename(df_school, &quot;% SWD&quot; = &quot;% Students with Disabilities&quot;) df_school &lt;- rename(df_school, &quot;% ELL&quot; = &quot;% English Language Learners&quot;) df_district &lt;- rename(df_district, &quot;% SWD&quot; = &quot;% Students with Disabilities&quot;) df_district &lt;- rename(df_district, &quot;% ELL&quot; = &quot;% English Language Learners&quot;) df_school &lt;- rename(df_school, &quot;ENI&quot; = &quot;Economic Need Index&quot;) df_district &lt;- rename(df_district, &quot;ENI&quot; = &quot;Economic Need Index&quot;) Writing two new csv’s so we don’t have to touch any of the old dataframes/csv’s anymore write_csv(df_school, &quot;../School.csv&quot;) write_csv(df_district, &quot;../District.csv&quot;) 3.3 Missing value analysis After importing our two new datasets, we can see that there are no more NA’s in either. head(colSums(is.na(new_school_data))) %&gt;% sort(decreasing = TRUE) ## DBN Year Mean.Scale.Score_e Mean.Scale.Score_m ## 0 0 0 0 ## Total.Enrollment X..Asian ## 0 0 head(colSums(is.na(new_district_data))) %&gt;% sort(decreasing = TRUE) ## District Year Mean.Scale.Score_e Mean.Scale.Score_m ## 0 0 0 0 ## Total.Enrollment X..Asian ## 0 0 At first glance using the skim() function, the data seems to be clean. As shown above, there were 0 missing values in the dataset, however the missing values are accounted for in the school and district datasets via the “% Missing Race/Ethnicity” and “% tested_e”/“% tested_m” columns. Our approach is to start by looking for missing values by filtering the “% Missing Race/Ethnicity” column and looking at the percentage of missing data. First we will find the minimum and maximum values for missing data in this column to determine the range of missing race/ethnicity data. Using the min() and max() functions, we discovered that the percent of missing data lies between 0% and ~ 6.7% for the school dataset and 0.09% and 2.4% for the district dataset. It’s good to note that the district data doesn’t have a large number of missing values because districts are comprised of schools and data has to be reported to the district each school belongs in. If a large amount of district data was missing, we’d have to question where a bunch of the individual school data went. Before using data visualization methods, we thought it’d be important to look at the missing data in intervals of 0.2 for the school data. We found that: * 2421 rows in the school dataset have no missing values. * 864 rows in the school dataset have between 0% and 2% missing data. * 36 rows in the school dataset have between 2% and 4% missing data. * 4 rows in the school dataset have between 4% and 6% missing data. * 3 rows in the school dataset have more than 6% missing data. For the district data, we thought it’d be nice to look at it by intervals of 0.005. We found that: - 0 rows in the district dataset have no missing values. - 61 rows in the district dataset have between 0% and 0.5% missing data. - 26 rows in the district dataset have between 0.5% and 1% missing data. - 8 rows in the district dataset have between 1% and 1.5% missing data. - 0 rows in the district dataset have between 1.5% and 2% missing data. - 1 row in the district has over 2% missing data. For our exploratory data analysis of the missing testing data, we decided to use a histogram. Histograms are good because they’re able to show frequency distributions. We found that the data was right-skewed. We can conclude from the visualization that majority of the schools are not missing data as it relates to racial and ethnic demographic data. This was also shown in our preliminary process, where we noted 2421 rows were not missing data, which is roughly 73% of our dataset.The remaining 27% of the data was missing about 6.7% of data, which is not too bad. Ridgeline plot for district by the amount of students that tested. The ridgeline plots look at the percentage of students that tested in Math and ELA by district from the 2017-2018, 2018-2019, and 2021-2022 academic years. Originally, we wanted to facet the data by year and see if there were any differences across districts, however there is only one entry per year for each district, so that would not be helpful (or produce a ridgeline plot). We found that the distributions were very similar across both subjects. In neither Math or ELA was there more than 50% students tested. For districts 7 and 8, in both ELA and Math, there is some slight overlap. This means that some of the entries for those two districts may be the same or close in value. In the math scores, we can also see a very small overlap with districts 24 and 25. Both overlaps are miniscule. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
